/* Generated By:JavaCC: Do not edit this line. Parser.java */
package sk.tuke.magsa.tools.parserext.javacc;

public class Parser implements ParserConstants {

  static final public sk.tuke.magsa.tools.metamodel.Model parse() throws ParseException {
  sk.tuke.magsa.tools.metamodel.Model _value;
    _value = ModelSymbol();
    jj_consume_token(0);
   {if (true) return _value;}
    throw new Error("Missing return statement in function");
  }

  static final public sk.tuke.magsa.tools.metamodel.Entity EntitySymbol() throws ParseException {
  java.lang.String name_1 = null;
  Token _tokenname_1 = null;
  sk.tuke.magsa.tools.metamodel.Property[] properties_1 = null;
  java.util.List<sk.tuke.magsa.tools.metamodel.Property> _listproperties_1 = new java.util.ArrayList<sk.tuke.magsa.tools.metamodel.Property>();
  sk.tuke.magsa.tools.metamodel.Property _itemproperties_1 = null;
    jj_consume_token(ENTITY);
    _tokenname_1 = jj_consume_token(NAME);
                                 name_1 = _tokenname_1.image;
    jj_consume_token(_123);
    _itemproperties_1 = PropertySymbol();
                                                   _listproperties_1.add(_itemproperties_1);
    label_1:
    while (true) {
      if (jj_2_1(2147483647)) {
        ;
      } else {
        break label_1;
      }
      _itemproperties_1 = PropertySymbol();
                                                   _listproperties_1.add(_itemproperties_1);
    }
    properties_1 = _listproperties_1.toArray(new sk.tuke.magsa.tools.metamodel.Property[] {});
    jj_consume_token(_125);
    {if (true) return yajco.ReferenceResolver.getInstance().register(new sk.tuke.magsa.tools.metamodel.Entity( name_1, properties_1), (Object)name_1, properties_1);}
    throw new Error("Missing return statement in function");
  }

  static final public sk.tuke.magsa.tools.metamodel.Model ModelSymbol() throws ParseException {
  sk.tuke.magsa.tools.metamodel.Entity[] entities_1 = null;
  java.util.List<sk.tuke.magsa.tools.metamodel.Entity> _listentities_1 = new java.util.ArrayList<sk.tuke.magsa.tools.metamodel.Entity>();
  sk.tuke.magsa.tools.metamodel.Entity _itementities_1 = null;
  sk.tuke.magsa.tools.metamodel.Reference[] references_1 = null;
  java.util.List<sk.tuke.magsa.tools.metamodel.Reference> _listreferences_1 = new java.util.ArrayList<sk.tuke.magsa.tools.metamodel.Reference>();
  sk.tuke.magsa.tools.metamodel.Reference _itemreferences_1 = null;
    _itementities_1 = EntitySymbol();
                                                 _listentities_1.add(_itementities_1);
    label_2:
    while (true) {
      if (jj_2_2(2147483647)) {
        ;
      } else {
        break label_2;
      }
      _itementities_1 = EntitySymbol();
                                               _listentities_1.add(_itementities_1);
    }
    entities_1 = _listentities_1.toArray(new sk.tuke.magsa.tools.metamodel.Entity[] {});
    label_3:
    while (true) {
      if (jj_2_3(2147483647)) {
        ;
      } else {
        break label_3;
      }
      _itemreferences_1 = ReferenceSymbol();
                                                    _listreferences_1.add(_itemreferences_1);
    }
    references_1 = _listreferences_1.toArray(new sk.tuke.magsa.tools.metamodel.Reference[] {});
    {if (true) return yajco.ReferenceResolver.getInstance().register(new sk.tuke.magsa.tools.metamodel.Model( entities_1, references_1), (Object)entities_1, references_1);}
    throw new Error("Missing return statement in function");
  }

  static final public sk.tuke.magsa.tools.metamodel.Property PropertySymbol() throws ParseException {
  java.lang.String name_1 = null;
  Token _tokenname_1 = null;
  sk.tuke.magsa.tools.metamodel.Type type_1 = null;
  sk.tuke.magsa.tools.metamodel.constraints.Constraint[] constraints_1 = null;
  java.util.List<sk.tuke.magsa.tools.metamodel.constraints.Constraint> _listconstraints_1 = new java.util.ArrayList<sk.tuke.magsa.tools.metamodel.constraints.Constraint>();
  sk.tuke.magsa.tools.metamodel.constraints.Constraint _itemconstraints_1 = null;
    _tokenname_1 = jj_consume_token(NAME);
                                   name_1 = _tokenname_1.image;
    jj_consume_token(_58);
    type_1 = TypeSymbol();

    if (jj_2_5(2147483647)) {
      _itemconstraints_1 = constraints_ConstraintSymbol();
                                                                   _listconstraints_1.add(_itemconstraints_1);
      label_4:
      while (true) {
        if (jj_2_4(2147483647)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(_44);
        _itemconstraints_1 = constraints_ConstraintSymbol();
                                                                      _listconstraints_1.add(_itemconstraints_1);
      }
    } else {
      ;
    }
           constraints_1 = _listconstraints_1.toArray(new sk.tuke.magsa.tools.metamodel.constraints.Constraint[] {});
    {if (true) return yajco.ReferenceResolver.getInstance().register(new sk.tuke.magsa.tools.metamodel.Property( name_1, type_1, constraints_1), (Object)name_1, type_1, constraints_1);}
    throw new Error("Missing return statement in function");
  }

  static final public sk.tuke.magsa.tools.metamodel.Reference ReferenceSymbol() throws ParseException {
  java.lang.String from_1 = null;
  Token _tokenfrom_1 = null;
  java.lang.String to_1 = null;
  Token _tokento_1 = null;
    jj_consume_token(REFERENCE);
    _tokenfrom_1 = jj_consume_token(NAME);
                                 from_1 = _tokenfrom_1.image;
    _tokento_1 = jj_consume_token(NAME);
                               to_1 = _tokento_1.image;
    {if (true) return yajco.ReferenceResolver.getInstance().register(new sk.tuke.magsa.tools.metamodel.Reference( from_1, to_1), (Object)from_1, to_1);}
    throw new Error("Missing return statement in function");
  }

  static final public sk.tuke.magsa.tools.metamodel.Type TypeSymbol() throws ParseException {
    if (jj_2_6(2147483647)) {
      jj_consume_token(INTEGER);
                                       {if (true) return sk.tuke.magsa.tools.metamodel.Type.INTEGER;}
    } else if (jj_2_7(2147483647)) {
      jj_consume_token(REAL);
                                {if (true) return sk.tuke.magsa.tools.metamodel.Type.REAL;}
    } else if (jj_2_8(2147483647)) {
      jj_consume_token(STRING);
                                    {if (true) return sk.tuke.magsa.tools.metamodel.Type.STRING;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public sk.tuke.magsa.tools.metamodel.constraints.Constraint constraints_ConstraintSymbol() throws ParseException {
  sk.tuke.magsa.tools.metamodel.constraints.Constraint _value = null;
    if (jj_2_9(2147483647)) {
      _value = constraints_LengthSymbol();
    } else if (jj_2_10(2147483647)) {
      _value = constraints_RequiredSymbol();
    } else if (jj_2_11(2147483647)) {
      _value = constraints_RegexSymbol();
    } else if (jj_2_12(2147483647)) {
      _value = constraints_RangeSymbol();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return _value;}
    throw new Error("Missing return statement in function");
  }

  static final public sk.tuke.magsa.tools.metamodel.constraints.Length constraints_LengthSymbol() throws ParseException {
  int min_1 = 0;
  Token _tokenmin_1 = null;
  int max_1 = 0;
  Token _tokenmax_1 = null;
    jj_consume_token(LENGTH);
    _tokenmin_1 = jj_consume_token(INT_VALUE);
                                     min_1 = Integer.parseInt(_tokenmin_1.image);
    _tokenmax_1 = jj_consume_token(INT_VALUE);
                                     max_1 = Integer.parseInt(_tokenmax_1.image);
    {if (true) return yajco.ReferenceResolver.getInstance().register(new sk.tuke.magsa.tools.metamodel.constraints.Length( min_1, max_1), (Object)min_1, max_1);}
    throw new Error("Missing return statement in function");
  }

  static final public sk.tuke.magsa.tools.metamodel.constraints.Range constraints_RangeSymbol() throws ParseException {
  int min_1 = 0;
  Token _tokenmin_1 = null;
  int max_1 = 0;
  Token _tokenmax_1 = null;
    jj_consume_token(RANGE);
    _tokenmin_1 = jj_consume_token(INT_VALUE);
                                     min_1 = Integer.parseInt(_tokenmin_1.image);
    _tokenmax_1 = jj_consume_token(INT_VALUE);
                                     max_1 = Integer.parseInt(_tokenmax_1.image);
    {if (true) return yajco.ReferenceResolver.getInstance().register(new sk.tuke.magsa.tools.metamodel.constraints.Range( min_1, max_1), (Object)min_1, max_1);}
    throw new Error("Missing return statement in function");
  }

  static final public sk.tuke.magsa.tools.metamodel.constraints.Regex constraints_RegexSymbol() throws ParseException {
  java.lang.String r_1 = null;
  Token _tokenr_1 = null;
    _tokenr_1 = jj_consume_token(R);
                             r_1 = _tokenr_1.image;
    {if (true) return yajco.ReferenceResolver.getInstance().register(new sk.tuke.magsa.tools.metamodel.constraints.Regex( r_1), (Object)r_1);}
    throw new Error("Missing return statement in function");
  }

  static final public sk.tuke.magsa.tools.metamodel.constraints.Required constraints_RequiredSymbol() throws ParseException {
    jj_consume_token(REQUIRED);
    {if (true) return yajco.ReferenceResolver.getInstance().register(new sk.tuke.magsa.tools.metamodel.constraints.Required( ));}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_3R_5() {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(_58)) return true;
    if (jj_3R_14()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(REQUIRED)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(LENGTH)) return true;
    if (jj_scan_token(INT_VALUE)) return true;
    if (jj_scan_token(INT_VALUE)) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(REFERENCE)) return true;
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(_44)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(R)) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_scan_token(ENTITY)) return true;
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(_123)) return true;
    if (jj_3R_5()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_16()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(_125)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(_44)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_8()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(REAL)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_8()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(RANGE)) return true;
    if (jj_scan_token(INT_VALUE)) return true;
    if (jj_scan_token(INT_VALUE)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(_44)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(REAL)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** User defined Token Manager. */
  static public TokenManager token_source;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[12];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;


  /** Constructor with user supplied Token Manager. */
  public Parser(TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[16];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 16; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                     }
